import path from 'node:path';
import fs from 'fs-extra';
import { glob } from 'tinyglobby';
import type { Sequence } from 'csdm/common/types/sequence';
import { RecordingSystem } from 'csdm/common/types/recording-system';
import { Game } from 'csdm/common/types/counter-strike';
import { getCsgoFolderPathOrThrow } from 'csdm/node/counter-strike/get-csgo-folder-path';
import { getSequenceName } from './get-sequence-name';
import { RecordingOutput } from 'csdm/common/types/recording-output';

async function deleteHlaeRawFiles(sequenceName: string, outputFolderPath: string, recordingOutput: RecordingOutput) {
  const sequenceRawFilesFolderPath = path.join(outputFolderPath, sequenceName);

  if (recordingOutput === RecordingOutput.Video) {
    // Example when using a video preset:
    // └─ C:/output/UUID/
    //     ├─ final-video.avi <- Merge of the HLAE video/audio files using FFmpeg.
    //     └─ 1-sequence/
    //         ├─ video.avi
    //         └─ take0000/
    //            └─ audio.wav
    // We can delete the sequence folder because the final video has been generated in the output folder.
    return await fs.remove(sequenceRawFilesFolderPath);
  }

  // Example when using the afxClassic preset (images):
  // └─ C:/output/UUID/
  //     └─ 1-sequence/
  //         └─ take0000/
  //            ├─ 00000.tga
  //            ├─ 00001.tga
  //            └─ audio.wav
  // ! At this point the raw files should have been moved to the output folder but we still try to delete the takeXXXX
  // to cleanup aborted recordings.
  const takeFolders = await glob('take*', {
    cwd: sequenceRawFilesFolderPath,
    absolute: true,
    onlyDirectories: true,
    deep: 1,
  });

  await Promise.all(takeFolders.map((folder) => fs.remove(folder)));
}

/*
 * Deletes the files generated by the CS2 startmovie command.
 * TGA files are located at csgo/game/csgo/csdm/movie/TIMESTAMP.
 * The WAV file is located at csgo/game/csgo/movie/TIMESTAMP.
 * We can simply delete the movie folders to remove all files.
 */
async function deleteCs2RawFiles(csgoFolderPath: string) {
  const csgoMovieFolderPath = path.join(csgoFolderPath, 'game', 'csgo', 'movie');
  const pluginMovieFolderPath = path.join(csgoFolderPath, 'game', 'csgo', 'csdm', 'movie');
  await Promise.all([fs.remove(pluginMovieFolderPath), fs.remove(csgoMovieFolderPath)]);
}

/*
 * Deletes the files generated by the CS:GO startmovie command.
 * We have to delete each file individually because they are stored in the root csgo folder.
 */
async function deleteCsgoRawFiles(csgoFolderPath: string, sequenceName: string) {
  const rawFilesFolderPath = path.join(csgoFolderPath, 'csgo');
  const tgaFiles = await glob('*.tga', {
    cwd: rawFilesFolderPath,
    followSymbolicLinks: false,
    absolute: true,
    onlyFiles: true,
  });
  await Promise.all(tgaFiles.map((file) => fs.remove(file)));
  await fs.remove(path.join(rawFilesFolderPath, `${sequenceName}.WAV`));
}

async function deleteStartMovieRawFiles(sequenceName: string, game: Game) {
  const isCsgo = game === Game.CSGO;
  const csgoFolderPath = await getCsgoFolderPathOrThrow(game);
  if (isCsgo) {
    return await deleteCsgoRawFiles(csgoFolderPath, sequenceName);
  }

  await deleteCs2RawFiles(csgoFolderPath);
}

type Parameters = {
  sequences: Sequence[];
  game: Game;
  recordingSystem: RecordingSystem;
  // @platform win32 Requires HLAE
  outputFolderPath: string;
  recordingOutput: RecordingOutput;
};

export async function deleteSequencesRawFiles({
  sequences,
  recordingSystem,
  outputFolderPath,
  game,
  recordingOutput,
}: Parameters) {
  for (const sequence of sequences) {
    const sequenceName = getSequenceName(sequence);
    if (recordingSystem === RecordingSystem.HLAE) {
      await deleteHlaeRawFiles(sequenceName, outputFolderPath, recordingOutput);
    } else {
      await deleteStartMovieRawFiles(sequenceName, game);
    }
  }
}
